<?phpfunction setInputValue($input){    echo "value='".$input."'";}function setOptionSelected($input , $compare){    if($input == $compare) echo "selected";}function setRadioSelected($input , $compare){    if($input == $compare) echo "checked";}function setSelectData($input , $currentValue = NULL){    foreach ($input as $key => $value) {        if($currentValue != NULL && $key==$currentValue){            echo "<option value='".$key."' selected>";        }        else{            echo "<option value='".$key."'>";        }        echo $value;        echo "</option>";    }}function pipeEnum($enumName , $k){    $ci =& get_instance();    foreach ($ci->config->item('Enum')[$enumName] as $key => $value) {        if($key == $k){            echo $value;        }    }}function pipeOrderIsFinished($isActive){    if ($isActive) {        return '<label class="label label-danger">بسته شده</label>';    }    else{        return '<label class="label label-success">باز</label>';    }}function FaToEn($input) {    return strtr($input, array('۰'=>'0', '۱'=>'1', '۲'=>'2', '۳'=>'3', '۴'=>'4', '۵'=>'5', '۶'=>'6', '۷'=>'7', '۸'=>'8', '۹'=>'9', '٠'=>'0', '١'=>'1', '٢'=>'2', '٣'=>'3', '٤'=>'4', '٥'=>'5', '٦'=>'6', '٧'=>'7', '٨'=>'8', '٩'=>'9'));}function convertDate($input , $isHtml = false){    if($input !== NULL){        if($isHtml){            return jDateTime::date("Y/m/d", $input, false, true, 'Asia/Tehran');        }        else{            return '<span style="direction:rtl;">'.jDateTime::date("Y/m/d", $input, false, true, 'Asia/Tehran').'</span>';        }    }    else{        return "";    }}function makeTime($input){    if($input !== NULL){        $input = explodeDate($input);        return jDateTime::mktime(0,0,0,$input[1],$input[2],$input[0]);    }}function getCurrentYear($increaseAmount = 0){    return intval(jDateTime::date("Y", false, false, 'Asia/Tehran')) + $increaseAmount;}function isValidNationalCode($input){    if (!preg_match("/^\d{10}$/", $input)        || $input=='0000000000'        || $input=='1111111111'        || $input=='2222222222'        || $input=='3333333333'        || $input=='4444444444'        || $input=='5555555555'        || $input=='6666666666'        || $input=='7777777777'        || $input=='8888888888'        || $input=='9999999999') {        return false;    }    $check = (int) $input[9];    $sum = array_sum(array_map(function ($x) use ($input) {            return ((int) $input[$x]) * (10 - $x);        }, range(0, 8))) % 11;    return ($sum < 2 && $check == $sum) || ($sum >= 2 && $check + $sum == 11);}function startsWith ($string, $startString){    $len = strlen($startString);    return (substr($string, 0, $len) === $startString);}function endsWith($string, $endString){    $len = strlen($endString);    if ($len == 0) {        return true;    }    return (substr($string, -$len) === $endString);}function randomString($type = 'numeric', $length = 10){    return random_string($type,$length);}function isSetValue($value){    if(isset($value) && !empty($value) && trim($value) !== ''){        return TRUE;    }    return FALSE;}function bgColor(){return dechex(rand(0,10000000));}function StandDeviation($arr){    $num_of_elements = count($arr);    $variance = 0.0;    // calculating mean using array_sum() method    $average = array_sum($arr)/$num_of_elements;    foreach($arr as $i) {        // sum of squares of differences between        // all numbers and means.        $variance += pow(($i - $average), 2);    }    return substr((string)sqrt($variance/$num_of_elements),0,5);}function ScoreStatus($scoreStatus){    if(!$scoreStatus){        return '<label class="label label-danger">مردود</label>';    }    else{        return '<label class="label label-success">قبول</label>';    }}function getLoginInfo(){    $ci =& get_instance();    return $ci->session->userdata('LoginInfo');}function pipeStatus($isActive){    if ($isActive) {        return '<label class="label label-success">فعال</label>';    }    else{        return '<label class="label label-danger">غیرفعال</label>';    }}function pipExamResultLevel($score){    switch ($score){        case 0:            return '';            break;        case $score > 0 && $score <= 10:            return 'level-1';            break;        case $score > 10 && $score <= 20:            return 'level-2';            break;        case $score > 20 && $score <= 30:            return 'level-3';            break;        case $score > 30 && $score <= 40:            return 'level-4';            break;        case $score > 40 && $score <= 50:            return 'level-5';            break;        case $score > 50 && $score <= 60:            return 'level-6';            break;        case $score > 60 && $score <= 70:            return 'level-7';            break;        case $score > 70 && $score <= 80:            return 'level-8';            break;        case $score > 80 && $score <= 90:            return 'level-9';            break;        case $score > 90 && $score <=100:            return 'level-10';            break;        default:            return '-';            break;    }}function getPersonId(){    return getLoginInfo()['PersonInfo']['PersonId'];}function getLoggedFoundationId(){    return getLoginInfo()['PersonRelatedAccounts']['FoundationAdmin'][0]['FoundationId'];}function getLoggedCustomerId(){    return getLoginInfo()['PersonRelatedAccounts']['Customer'][0]['CustomerId'];}function columnFromIndex($number){    if($number === 0)        return "A";    $name='';    while($number>0){        $name=chr(65+$number%26).$name;        $number=intval($number/26)-1;        if($number === 0){            $name="A".$name;            break;        }    }    return $name;}function translate($lang='fa',$persian,$arabic){    if($lang == 'fa'){        echo $persian;    } else{        echo $arabic;    }}?>